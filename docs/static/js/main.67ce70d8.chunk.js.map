{"version":3,"sources":["GameOver.js","App.js","reportWebVitals.js","index.js"],"names":["GameOver","props","id","style","width","height","borderWidth","fontSize","score","newHighScore","highScore","App","handleKeyDown","bind","state","blockWidth","blockHeight","gameLoopTimeout","timeoutId","startSnakeSize","snake","apple","direction","directionChanged","isGameOver","snakeColor","getRandomColor","appleColor","Number","localStorage","getItem","this","initGame","window","addEventListener","gameLoop","percentageWidth","document","getElementById","parentElement","offsetWidth","Xpos","Ypos","snakeHead","push","i","snakePart","appleXpos","Math","floor","random","appleYpos","setState","setTimeout","moveSnake","tryToEatSnake","tryToEatApple","clearTimeout","removeEventListener","isAppleOnSnake","color","previousPartX","previousPartY","tmpPartX","tmpPartY","moveHead","length","newTail","setItem","moveHeadLeft","moveHeadUp","moveHeadRight","moveHeadDown","event","keyCode","resetGame","goLeft","goUp","goRight","goDown","newDirection","map","index","className","left","top","background","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67ce70d8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction GameOver(props) {\n  return (\n    <div\n      id='GameBoard'\n      style={{\n        width: props.width,\n        height: props.height,\n        borderWidth: props.width / 50,\n      }}\n    >\n      <div id='GameOver' style={{ fontSize: props.width / 15 }}>\n        <div id='GameOverText'>GAME OVER</div>\n        <div>Your score: {props.score}</div>\n        <div>\n          {props.newHighScore ? 'New local ' : 'Local '}high score:{' '}\n          {props.highScore}\n        </div>\n        <div id='PressSpaceText'>Press Space to restart</div>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOver;\n","import React from 'react';\nimport './App.scss';\nimport GameOver from './GameOver';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n\n    this.state = {\n      width: 0,\n      height: 0,\n      blockWidth: 0,\n      blockHeight: 0,\n      gameLoopTimeout: 50,\n      timeoutId: 0,\n      startSnakeSize: 0,\n      snake: [],\n      apple: {},\n      direction: 'right',\n      directionChanged: false,\n      isGameOver: false,\n      snakeColor: this.props.snakeColor || this.getRandomColor(),\n      appleColor: this.props.appleColor || this.getRandomColor(),\n      score: 0,\n      highScore: Number(localStorage.getItem('snakeHighScore')) || 0,\n      newHighScore: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initGame();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  initGame() {\n    // Game size initialization\n    let percentageWidth = this.props.percentageWidth || 40;\n    let width =\n      document.getElementById('GameBoard').parentElement.offsetWidth *\n      (percentageWidth / 100);\n    width -= width % 30;\n    if (width < 30) width = 30;\n    let height = (width / 3) * 2;\n    let blockWidth = width / 30;\n    let blockHeight = height / 20;\n\n    // snake initialization\n    let startSnakeSize = this.props.startSnakeSize || 6;\n    let snake = [];\n    let Xpos = width / 2;\n    let Ypos = height / 2;\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\n    snake.push(snakeHead);\n    for (let i = 1; i < startSnakeSize; i++) {\n      Xpos -= blockWidth;\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\n      snake.push(snakePart);\n    }\n\n    // apple position initialization\n    let appleXpos =\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n      blockWidth;\n    let appleYpos =\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n      blockHeight;\n    while (appleYpos === snake[0].Ypos) {\n      appleYpos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n    }\n\n    this.setState({\n      width,\n      height,\n      blockWidth,\n      blockHeight,\n      startSnakeSize,\n      snake,\n      apple: { Xpos: appleXpos, Ypos: appleYpos },\n    });\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.moveSnake();\n        this.tryToEatSnake();\n        this.tryToEatApple();\n        this.setState({ directionChanged: false });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n\n    this.setState({ timeoutId });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  resetGame() {\n    let width = this.state.width;\n    let height = this.state.height;\n    let blockWidth = this.state.blockWidth;\n    let blockHeight = this.state.blockHeight;\n    let apple = this.state.apple;\n\n    // snake reset\n    let snake = [];\n    let Xpos = width / 2;\n    let Ypos = height / 2;\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\n    snake.push(snakeHead);\n    for (let i = 1; i < this.state.startSnakeSize; i++) {\n      Xpos -= blockWidth;\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\n      snake.push(snakePart);\n    }\n\n    // apple position reset\n    apple.Xpos =\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n      blockWidth;\n    apple.Ypos =\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n      blockHeight;\n    while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\n      apple.Xpos =\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n        blockWidth;\n      apple.Ypos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n    }\n\n    this.setState({\n      snake,\n      apple,\n      direction: 'right',\n      directionChanged: false,\n      isGameOver: false,\n      gameLoopTimeout: 50,\n      snakeColor: this.getRandomColor(),\n      appleColor: this.getRandomColor(),\n      score: 0,\n      newHighScore: false,\n    });\n  }\n\n  getRandomColor() {\n    let hexa = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) color += hexa[Math.floor(Math.random() * 16)];\n    return color;\n  }\n\n  moveSnake() {\n    let snake = this.state.snake;\n    let previousPartX = this.state.snake[0].Xpos;\n    let previousPartY = this.state.snake[0].Ypos;\n    let tmpPartX = previousPartX;\n    let tmpPartY = previousPartY;\n    this.moveHead();\n    for (let i = 1; i < snake.length; i++) {\n      tmpPartX = snake[i].Xpos;\n      tmpPartY = snake[i].Ypos;\n      snake[i].Xpos = previousPartX;\n      snake[i].Ypos = previousPartY;\n      previousPartX = tmpPartX;\n      previousPartY = tmpPartY;\n    }\n    this.setState({ snake });\n  }\n\n  tryToEatApple() {\n    let snake = this.state.snake;\n    let apple = this.state.apple;\n\n    // if the snake's head is on an apple\n    if (snake[0].Xpos === apple.Xpos && snake[0].Ypos === apple.Ypos) {\n      let width = this.state.width;\n      let height = this.state.height;\n      let blockWidth = this.state.blockWidth;\n      let blockHeight = this.state.blockHeight;\n      let newTail = { Xpos: apple.Xpos, Ypos: apple.Ypos };\n      let highScore = this.state.highScore;\n      let newHighScore = this.state.newHighScore;\n      let gameLoopTimeout = this.state.gameLoopTimeout;\n\n      // increase snake size\n      snake.push(newTail);\n\n      // create another apple\n      apple.Xpos =\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n        blockWidth;\n      apple.Ypos =\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\n        blockHeight;\n      while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\n        apple.Xpos =\n          Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\n          blockWidth;\n        apple.Ypos =\n          Math.floor(\n            Math.random() * ((height - blockHeight) / blockHeight + 1)\n          ) * blockHeight;\n      }\n\n      // increment high score if needed\n      if (this.state.score === highScore) {\n        highScore++;\n        localStorage.setItem('snakeHighScore', highScore);\n        newHighScore = true;\n      }\n\n      // decrease the game loop timeout\n      if (gameLoopTimeout > 25) gameLoopTimeout -= 0.5;\n\n      this.setState({\n        snake,\n        apple,\n        score: this.state.score + 1,\n        highScore,\n        newHighScore,\n        gameLoopTimeout,\n      });\n    }\n  }\n\n  tryToEatSnake() {\n    let snake = this.state.snake;\n\n    for (let i = 1; i < snake.length; i++) {\n      if (snake[0].Xpos === snake[i].Xpos && snake[0].Ypos === snake[i].Ypos)\n        this.setState({ isGameOver: true });\n    }\n  }\n\n  isAppleOnSnake(appleXpos, appleYpos) {\n    let snake = this.state.snake;\n    for (let i = 0; i < snake.length; i++) {\n      if (appleXpos === snake[i].Xpos && appleYpos === snake[i].Ypos)\n        return true;\n    }\n    return false;\n  }\n\n  moveHead() {\n    switch (this.state.direction) {\n      case 'left':\n        this.moveHeadLeft();\n        break;\n      case 'up':\n        this.moveHeadUp();\n        break;\n      case 'right':\n        this.moveHeadRight();\n        break;\n      default:\n        this.moveHeadDown();\n    }\n  }\n\n  moveHeadLeft() {\n    let width = this.state.width;\n    let blockWidth = this.state.blockWidth;\n    let snake = this.state.snake;\n    snake[0].Xpos =\n      snake[0].Xpos <= 0 ? width - blockWidth : snake[0].Xpos - blockWidth;\n    this.setState({ snake });\n  }\n\n  moveHeadUp() {\n    let height = this.state.height;\n    let blockHeight = this.state.blockHeight;\n    let snake = this.state.snake;\n    snake[0].Ypos =\n      snake[0].Ypos <= 0 ? height - blockHeight : snake[0].Ypos - blockHeight;\n    this.setState({ snake });\n  }\n\n  moveHeadRight() {\n    let width = this.state.width;\n    let blockWidth = this.state.blockWidth;\n    let snake = this.state.snake;\n    snake[0].Xpos =\n      snake[0].Xpos >= width - blockWidth ? 0 : snake[0].Xpos + blockWidth;\n    this.setState({ snake });\n  }\n\n  moveHeadDown() {\n    let height = this.state.height;\n    let blockHeight = this.state.blockHeight;\n    let snake = this.state.snake;\n    snake[0].Ypos =\n      snake[0].Ypos >= height - blockHeight ? 0 : snake[0].Ypos + blockHeight;\n    this.setState({ snake });\n  }\n\n  handleKeyDown(event) {\n    // if spacebar is pressed to run a new game\n    if (this.state.isGameOver && event.keyCode === 32) {\n      this.resetGame();\n      return;\n    }\n\n    if (this.state.directionChanged) return;\n\n    switch (event.keyCode) {\n      case 37:\n      case 65:\n        this.goLeft();\n        break;\n      case 38:\n      case 87:\n        this.goUp();\n        break;\n      case 39:\n      case 68:\n        this.goRight();\n        break;\n      case 40:\n      case 83:\n        this.goDown();\n        break;\n      default:\n    }\n    this.setState({ directionChanged: true });\n  }\n\n  goLeft() {\n    let newDirection = this.state.direction === 'right' ? 'right' : 'left';\n    this.setState({ direction: newDirection });\n  }\n\n  goUp() {\n    let newDirection = this.state.direction === 'down' ? 'down' : 'up';\n    this.setState({ direction: newDirection });\n  }\n\n  goRight() {\n    let newDirection = this.state.direction === 'left' ? 'left' : 'right';\n    this.setState({ direction: newDirection });\n  }\n\n  goDown() {\n    let newDirection = this.state.direction === 'up' ? 'up' : 'down';\n    this.setState({ direction: newDirection });\n  }\n\n  render() {\n    // Game over\n    if (this.state.isGameOver) {\n      return (\n        <GameOver\n          width={this.state.width}\n          height={this.state.height}\n          highScore={this.state.highScore}\n          newHighScore={this.state.newHighScore}\n          score={this.state.score}\n        />\n      );\n    }\n\n    return (\n      <div\n        id='GameBoard'\n        style={{\n          width: this.state.width,\n          height: this.state.height,\n          borderWidth: this.state.width / 50,\n        }}\n      >\n        {this.state.snake.map((snakePart, index) => {\n          return (\n            <div\n              key={index}\n              className='Block'\n              style={{\n                width: this.state.blockWidth,\n                height: this.state.blockHeight,\n                left: snakePart.Xpos,\n                top: snakePart.Ypos,\n                background: this.state.snakeColor,\n              }}\n            />\n          );\n        })}\n        <div\n          className='Block'\n          style={{\n            width: this.state.blockWidth,\n            height: this.state.blockHeight,\n            left: this.state.apple.Xpos,\n            top: this.state.apple.Ypos,\n            background: this.state.appleColor,\n          }}\n        />\n        <div id='Score' style={{ fontSize: this.state.width / 20 }}>\n          HIGH-SCORE: {this.state.highScore}&ensp;&ensp;&ensp;&ensp;SCORE:{' '}\n          {this.state.score}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}