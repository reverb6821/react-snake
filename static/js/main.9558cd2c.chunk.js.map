{"version":3,"sources":["GameOver.js","App.js","reportWebVitals.js","index.js"],"names":["GameOver","props","id","style","width","height","borderWidth","fontSize","score","newHighScore","highScore","App","handleKeyDown","bind","state","blockWidth","blockHeight","gameLoopTimeout","timeoutId","startSnakeSize","snake","apple","direction","directionChanged","isGameOver","snakeColor","getRandomColor","appleColor","Number","localStorage","getItem","this","initGame","window","addEventListener","gameLoop","percentageWidth","document","getElementById","parentElement","offsetWidth","Xpos","Ypos","snakeHead","push","i","snakePart","appleXpos","Math","floor","random","appleYpos","setState","setTimeout","moveSnake","tryToEatSnake","tryToEatApple","clearTimeout","removeEventListener","isAppleOnSnake","color","previousPartX","previousPartY","tmpPartX","tmpPartY","moveHead","length","newTail","setItem","moveHeadLeft","moveHeadUp","moveHeadRight","moveHeadDown","event","keyCode","resetGame","goLeft","goUp","goRight","goDown","newDirection","map","index","className","left","top","background","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iNAyBeA,MAvBf,SAAkBC,GAChB,OACE,qBACEC,GAAG,YACHC,MAAO,CACLC,MAAOH,EAAMG,MACbC,OAAQJ,EAAMI,OACdC,YAAaL,EAAMG,MAAQ,IAL/B,SAQE,sBAAKF,GAAG,WAAWC,MAAO,CAAEI,SAAUN,EAAMG,MAAQ,IAApD,UACE,qBAAKF,GAAG,eAAR,uBACA,+CAAkBD,EAAMO,SACxB,gCACGP,EAAMQ,aAAe,aAAe,SADvC,cAC4D,IACzDR,EAAMS,aAET,qBAAKR,GAAG,iBAAR,0CC2YOS,E,kDAzZb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAEDW,cAAgB,EAAKA,cAAcC,KAAnB,gBAErB,EAAKC,MAAQ,CACXV,MAAO,EACPC,OAAQ,EACRU,WAAY,EACZC,YAAa,EACbC,gBAAiB,GACjBC,UAAW,EACXC,eAAgB,EAChBC,MAAO,GACPC,MAAO,GACPC,UAAW,QACXC,kBAAkB,EAClBC,YAAY,EACZC,WAAY,EAAKxB,MAAMwB,YAAc,EAAKC,iBAC1CC,WAAY,EAAK1B,MAAM0B,YAAc,EAAKD,iBAC1ClB,MAAO,EACPE,UAAWkB,OAAOC,aAAaC,QAAQ,oBAAsB,EAC7DrB,cAAc,GAtBC,E,qDA0BnB,WACEsB,KAAKC,WACLC,OAAOC,iBAAiB,UAAWH,KAAKnB,eACxCmB,KAAKI,a,sBAGP,WAEE,IAAIC,EAAkBL,KAAK9B,MAAMmC,iBAAmB,GAChDhC,EACFiC,SAASC,eAAe,aAAaC,cAAcC,aAClDJ,EAAkB,MACrBhC,GAASA,EAAQ,IACL,KAAIA,EAAQ,IACxB,IAAIC,EAAUD,EAAQ,EAAK,EACvBW,EAAaX,EAAQ,GACrBY,EAAcX,EAAS,GAGvBc,EAAiBY,KAAK9B,MAAMkB,gBAAkB,EAC9CC,EAAQ,GACRqB,EAAOrC,EAAQ,EACfsC,EAAOrC,EAAS,EAChBsC,EAAY,CAAEF,KAAMrC,EAAQ,EAAGsC,KAAMrC,EAAS,GAClDe,EAAMwB,KAAKD,GACX,IAAK,IAAIE,EAAI,EAAGA,EAAI1B,EAAgB0B,IAAK,CAEvC,IAAIC,EAAY,CAAEL,KADlBA,GAAQ1B,EACsB2B,KAAMA,GACpCtB,EAAMwB,KAAKE,GAUb,IANA,IAAIC,EACFC,KAAKC,MAAMD,KAAKE,WAAa9C,EAAQW,GAAcA,EAAa,IAChEA,EACEoC,EACFH,KAAKC,MAAMD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACnEA,EACKmC,IAAc/B,EAAM,GAAGsB,MAC5BS,EACEH,KAAKC,MAAMD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACnEA,EAGJe,KAAKqB,SAAS,CACZhD,QACAC,SACAU,aACAC,cACAG,iBACAC,QACAC,MAAO,CAAEoB,KAAMM,EAAWL,KAAMS,O,sBAIpC,WAAY,IAAD,OACLjC,EAAYmC,YAAW,WACpB,EAAKvC,MAAMU,aACd,EAAK8B,YACL,EAAKC,gBACL,EAAKC,gBACL,EAAKJ,SAAS,CAAE7B,kBAAkB,KAGpC,EAAKY,aACJJ,KAAKjB,MAAMG,iBAEdc,KAAKqB,SAAS,CAAElC,gB,kCAGlB,WACEuC,aAAa1B,KAAKjB,MAAMI,WACxBe,OAAOyB,oBAAoB,UAAW3B,KAAKnB,iB,uBAG7C,WACE,IAAIR,EAAQ2B,KAAKjB,MAAMV,MACnBC,EAAS0B,KAAKjB,MAAMT,OACpBU,EAAagB,KAAKjB,MAAMC,WACxBC,EAAce,KAAKjB,MAAME,YACzBK,EAAQU,KAAKjB,MAAMO,MAGnBD,EAAQ,GACRqB,EAAOrC,EAAQ,EACfsC,EAAOrC,EAAS,EAChBsC,EAAY,CAAEF,KAAMrC,EAAQ,EAAGsC,KAAMrC,EAAS,GAClDe,EAAMwB,KAAKD,GACX,IAAK,IAAIE,EAAI,EAAGA,EAAId,KAAKjB,MAAMK,eAAgB0B,IAAK,CAElD,IAAIC,EAAY,CAAEL,KADlBA,GAAQ1B,EACsB2B,KAAMA,GACpCtB,EAAMwB,KAAKE,GAUb,IANAzB,EAAMoB,KACJO,KAAKC,MAAMD,KAAKE,WAAa9C,EAAQW,GAAcA,EAAa,IAChEA,EACFM,EAAMqB,KACJM,KAAKC,MAAMD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACnEA,EACKe,KAAK4B,eAAetC,EAAMoB,KAAMpB,EAAMqB,OAC3CrB,EAAMoB,KACJO,KAAKC,MAAMD,KAAKE,WAAa9C,EAAQW,GAAcA,EAAa,IAChEA,EACFM,EAAMqB,KACJM,KAAKC,MAAMD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACnEA,EAGJe,KAAKqB,SAAS,CACZhC,QACAC,QACAC,UAAW,QACXC,kBAAkB,EAClBC,YAAY,EACZP,gBAAiB,GACjBQ,WAAYM,KAAKL,iBACjBC,WAAYI,KAAKL,iBACjBlB,MAAO,EACPC,cAAc,M,4BAIlB,WAGE,IAFA,IACImD,EAAQ,IACHf,EAAI,EAAGA,EAAI,EAAGA,IAAKe,GAFjB,mBAE+BZ,KAAKC,MAAsB,GAAhBD,KAAKE,WAC1D,OAAOU,I,uBAGT,WACE,IAAIxC,EAAQW,KAAKjB,MAAMM,MACnByC,EAAgB9B,KAAKjB,MAAMM,MAAM,GAAGqB,KACpCqB,EAAgB/B,KAAKjB,MAAMM,MAAM,GAAGsB,KACpCqB,EAAWF,EACXG,EAAWF,EACf/B,KAAKkC,WACL,IAAK,IAAIpB,EAAI,EAAGA,EAAIzB,EAAM8C,OAAQrB,IAChCkB,EAAW3C,EAAMyB,GAAGJ,KACpBuB,EAAW5C,EAAMyB,GAAGH,KACpBtB,EAAMyB,GAAGJ,KAAOoB,EAChBzC,EAAMyB,GAAGH,KAAOoB,EAChBD,EAAgBE,EAChBD,EAAgBE,EAElBjC,KAAKqB,SAAS,CAAEhC,Y,2BAGlB,WACE,IAAIA,EAAQW,KAAKjB,MAAMM,MACnBC,EAAQU,KAAKjB,MAAMO,MAGvB,GAAID,EAAM,GAAGqB,OAASpB,EAAMoB,MAAQrB,EAAM,GAAGsB,OAASrB,EAAMqB,KAAM,CAChE,IAAItC,EAAQ2B,KAAKjB,MAAMV,MACnBC,EAAS0B,KAAKjB,MAAMT,OACpBU,EAAagB,KAAKjB,MAAMC,WACxBC,EAAce,KAAKjB,MAAME,YACzBmD,EAAU,CAAE1B,KAAMpB,EAAMoB,KAAMC,KAAMrB,EAAMqB,MAC1ChC,EAAYqB,KAAKjB,MAAMJ,UACvBD,EAAesB,KAAKjB,MAAML,aAC1BQ,EAAkBc,KAAKjB,MAAMG,gBAYjC,IATAG,EAAMwB,KAAKuB,GAGX9C,EAAMoB,KACJO,KAAKC,MAAMD,KAAKE,WAAa9C,EAAQW,GAAcA,EAAa,IAChEA,EACFM,EAAMqB,KACJM,KAAKC,MAAMD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACnEA,EACKe,KAAK4B,eAAetC,EAAMoB,KAAMpB,EAAMqB,OAC3CrB,EAAMoB,KACJO,KAAKC,MAAMD,KAAKE,WAAa9C,EAAQW,GAAcA,EAAa,IAChEA,EACFM,EAAMqB,KACJM,KAAKC,MACHD,KAAKE,WAAa7C,EAASW,GAAeA,EAAc,IACtDA,EAIJe,KAAKjB,MAAMN,QAAUE,IACvBA,IACAmB,aAAauC,QAAQ,iBAAkB1D,GACvCD,GAAe,GAIbQ,EAAkB,KAAIA,GAAmB,IAE7Cc,KAAKqB,SAAS,CACZhC,QACAC,QACAb,MAAOuB,KAAKjB,MAAMN,MAAQ,EAC1BE,YACAD,eACAQ,uB,2BAKN,WAGE,IAFA,IAAIG,EAAQW,KAAKjB,MAAMM,MAEdyB,EAAI,EAAGA,EAAIzB,EAAM8C,OAAQrB,IAC5BzB,EAAM,GAAGqB,OAASrB,EAAMyB,GAAGJ,MAAQrB,EAAM,GAAGsB,OAAStB,EAAMyB,GAAGH,MAChEX,KAAKqB,SAAS,CAAE5B,YAAY,M,4BAIlC,SAAeuB,EAAWI,GAExB,IADA,IAAI/B,EAAQW,KAAKjB,MAAMM,MACdyB,EAAI,EAAGA,EAAIzB,EAAM8C,OAAQrB,IAChC,GAAIE,IAAc3B,EAAMyB,GAAGJ,MAAQU,IAAc/B,EAAMyB,GAAGH,KACxD,OAAO,EAEX,OAAO,I,sBAGT,WACE,OAAQX,KAAKjB,MAAMQ,WACjB,IAAK,OACHS,KAAKsC,eACL,MACF,IAAK,KACHtC,KAAKuC,aACL,MACF,IAAK,QACHvC,KAAKwC,gBACL,MACF,QACExC,KAAKyC,kB,0BAIX,WACE,IAAIpE,EAAQ2B,KAAKjB,MAAMV,MACnBW,EAAagB,KAAKjB,MAAMC,WACxBK,EAAQW,KAAKjB,MAAMM,MACvBA,EAAM,GAAGqB,KACPrB,EAAM,GAAGqB,MAAQ,EAAIrC,EAAQW,EAAaK,EAAM,GAAGqB,KAAO1B,EAC5DgB,KAAKqB,SAAS,CAAEhC,Y,wBAGlB,WACE,IAAIf,EAAS0B,KAAKjB,MAAMT,OACpBW,EAAce,KAAKjB,MAAME,YACzBI,EAAQW,KAAKjB,MAAMM,MACvBA,EAAM,GAAGsB,KACPtB,EAAM,GAAGsB,MAAQ,EAAIrC,EAASW,EAAcI,EAAM,GAAGsB,KAAO1B,EAC9De,KAAKqB,SAAS,CAAEhC,Y,2BAGlB,WACE,IAAIhB,EAAQ2B,KAAKjB,MAAMV,MACnBW,EAAagB,KAAKjB,MAAMC,WACxBK,EAAQW,KAAKjB,MAAMM,MACvBA,EAAM,GAAGqB,KACPrB,EAAM,GAAGqB,MAAQrC,EAAQW,EAAa,EAAIK,EAAM,GAAGqB,KAAO1B,EAC5DgB,KAAKqB,SAAS,CAAEhC,Y,0BAGlB,WACE,IAAIf,EAAS0B,KAAKjB,MAAMT,OACpBW,EAAce,KAAKjB,MAAME,YACzBI,EAAQW,KAAKjB,MAAMM,MACvBA,EAAM,GAAGsB,KACPtB,EAAM,GAAGsB,MAAQrC,EAASW,EAAc,EAAII,EAAM,GAAGsB,KAAO1B,EAC9De,KAAKqB,SAAS,CAAEhC,Y,2BAGlB,SAAcqD,GAEZ,GAAI1C,KAAKjB,MAAMU,YAAgC,KAAlBiD,EAAMC,QACjC3C,KAAK4C,iBAIP,IAAI5C,KAAKjB,MAAMS,iBAAf,CAEA,OAAQkD,EAAMC,SACZ,KAAK,GACL,KAAK,GACH3C,KAAK6C,SACL,MACF,KAAK,GACL,KAAK,GACH7C,KAAK8C,OACL,MACF,KAAK,GACL,KAAK,GACH9C,KAAK+C,UACL,MACF,KAAK,GACL,KAAK,GACH/C,KAAKgD,SAIThD,KAAKqB,SAAS,CAAE7B,kBAAkB,O,oBAGpC,WACE,IAAIyD,EAAwC,UAAzBjD,KAAKjB,MAAMQ,UAAwB,QAAU,OAChES,KAAKqB,SAAS,CAAE9B,UAAW0D,M,kBAG7B,WACE,IAAIA,EAAwC,SAAzBjD,KAAKjB,MAAMQ,UAAuB,OAAS,KAC9DS,KAAKqB,SAAS,CAAE9B,UAAW0D,M,qBAG7B,WACE,IAAIA,EAAwC,SAAzBjD,KAAKjB,MAAMQ,UAAuB,OAAS,QAC9DS,KAAKqB,SAAS,CAAE9B,UAAW0D,M,oBAG7B,WACE,IAAIA,EAAwC,OAAzBjD,KAAKjB,MAAMQ,UAAqB,KAAO,OAC1DS,KAAKqB,SAAS,CAAE9B,UAAW0D,M,oBAG7B,WAAU,IAAD,OAEP,OAAIjD,KAAKjB,MAAMU,WAEX,cAAC,EAAD,CACEpB,MAAO2B,KAAKjB,MAAMV,MAClBC,OAAQ0B,KAAKjB,MAAMT,OACnBK,UAAWqB,KAAKjB,MAAMJ,UACtBD,aAAcsB,KAAKjB,MAAML,aACzBD,MAAOuB,KAAKjB,MAAMN,QAMtB,sBACEN,GAAG,YACHC,MAAO,CACLC,MAAO2B,KAAKjB,MAAMV,MAClBC,OAAQ0B,KAAKjB,MAAMT,OACnBC,YAAayB,KAAKjB,MAAMV,MAAQ,IALpC,UAQG2B,KAAKjB,MAAMM,MAAM6D,KAAI,SAACnC,EAAWoC,GAChC,OACE,qBAEEC,UAAU,QACVhF,MAAO,CACLC,MAAO,EAAKU,MAAMC,WAClBV,OAAQ,EAAKS,MAAME,YACnBoE,KAAMtC,EAAUL,KAChB4C,IAAKvC,EAAUJ,KACf4C,WAAY,EAAKxE,MAAMW,aAPpByD,MAYX,qBACEC,UAAU,QACVhF,MAAO,CACLC,MAAO2B,KAAKjB,MAAMC,WAClBV,OAAQ0B,KAAKjB,MAAME,YACnBoE,KAAMrD,KAAKjB,MAAMO,MAAMoB,KACvB4C,IAAKtD,KAAKjB,MAAMO,MAAMqB,KACtB4C,WAAYvD,KAAKjB,MAAMa,cAG3B,sBAAKzB,GAAG,QAAQC,MAAO,CAAEI,SAAUwB,KAAKjB,MAAMV,MAAQ,IAAtD,yBACe2B,KAAKjB,MAAMJ,UAD1B,iCACmE,IAChEqB,KAAKjB,MAAMN,gB,GAnZJ+E,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASC,eAAe,SAM1BmD,M","file":"static/js/main.9558cd2c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction GameOver(props) {\r\n  return (\r\n    <div\r\n      id='GameBoard'\r\n      style={{\r\n        width: props.width,\r\n        height: props.height,\r\n        borderWidth: props.width / 50,\r\n      }}\r\n    >\r\n      <div id='GameOver' style={{ fontSize: props.width / 15 }}>\r\n        <div id='GameOverText'>GAME OVER</div>\r\n        <div>Your score: {props.score}</div>\r\n        <div>\r\n          {props.newHighScore ? 'New local ' : 'Local '}high score:{' '}\r\n          {props.highScore}\r\n        </div>\r\n        <div id='PressSpaceText'>Press Space to restart</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport GameOver from './GameOver';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      blockWidth: 0,\r\n      blockHeight: 0,\r\n      gameLoopTimeout: 50,\r\n      timeoutId: 0,\r\n      startSnakeSize: 0,\r\n      snake: [],\r\n      apple: {},\r\n      direction: 'right',\r\n      directionChanged: false,\r\n      isGameOver: false,\r\n      snakeColor: this.props.snakeColor || this.getRandomColor(),\r\n      appleColor: this.props.appleColor || this.getRandomColor(),\r\n      score: 0,\r\n      highScore: Number(localStorage.getItem('snakeHighScore')) || 0,\r\n      newHighScore: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGame();\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n    this.gameLoop();\r\n  }\r\n\r\n  initGame() {\r\n    // Game size initialization\r\n    let percentageWidth = this.props.percentageWidth || 40;\r\n    let width =\r\n      document.getElementById('GameBoard').parentElement.offsetWidth *\r\n      (percentageWidth / 100);\r\n    width -= width % 30;\r\n    if (width < 30) width = 30;\r\n    let height = (width / 3) * 2;\r\n    let blockWidth = width / 30;\r\n    let blockHeight = height / 20;\r\n\r\n    // snake initialization\r\n    let startSnakeSize = this.props.startSnakeSize || 6;\r\n    let snake = [];\r\n    let Xpos = width / 2;\r\n    let Ypos = height / 2;\r\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\r\n    snake.push(snakeHead);\r\n    for (let i = 1; i < startSnakeSize; i++) {\r\n      Xpos -= blockWidth;\r\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\r\n      snake.push(snakePart);\r\n    }\r\n\r\n    // apple position initialization\r\n    let appleXpos =\r\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n      blockWidth;\r\n    let appleYpos =\r\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\r\n      blockHeight;\r\n    while (appleYpos === snake[0].Ypos) {\r\n      appleYpos =\r\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\r\n        blockHeight;\r\n    }\r\n\r\n    this.setState({\r\n      width,\r\n      height,\r\n      blockWidth,\r\n      blockHeight,\r\n      startSnakeSize,\r\n      snake,\r\n      apple: { Xpos: appleXpos, Ypos: appleYpos },\r\n    });\r\n  }\r\n\r\n  gameLoop() {\r\n    let timeoutId = setTimeout(() => {\r\n      if (!this.state.isGameOver) {\r\n        this.moveSnake();\r\n        this.tryToEatSnake();\r\n        this.tryToEatApple();\r\n        this.setState({ directionChanged: false });\r\n      }\r\n\r\n      this.gameLoop();\r\n    }, this.state.gameLoopTimeout);\r\n\r\n    this.setState({ timeoutId });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.state.timeoutId);\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  resetGame() {\r\n    let width = this.state.width;\r\n    let height = this.state.height;\r\n    let blockWidth = this.state.blockWidth;\r\n    let blockHeight = this.state.blockHeight;\r\n    let apple = this.state.apple;\r\n\r\n    // snake reset\r\n    let snake = [];\r\n    let Xpos = width / 2;\r\n    let Ypos = height / 2;\r\n    let snakeHead = { Xpos: width / 2, Ypos: height / 2 };\r\n    snake.push(snakeHead);\r\n    for (let i = 1; i < this.state.startSnakeSize; i++) {\r\n      Xpos -= blockWidth;\r\n      let snakePart = { Xpos: Xpos, Ypos: Ypos };\r\n      snake.push(snakePart);\r\n    }\r\n\r\n    // apple position reset\r\n    apple.Xpos =\r\n      Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n      blockWidth;\r\n    apple.Ypos =\r\n      Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\r\n      blockHeight;\r\n    while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\r\n      apple.Xpos =\r\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n        blockWidth;\r\n      apple.Ypos =\r\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\r\n        blockHeight;\r\n    }\r\n\r\n    this.setState({\r\n      snake,\r\n      apple,\r\n      direction: 'right',\r\n      directionChanged: false,\r\n      isGameOver: false,\r\n      gameLoopTimeout: 50,\r\n      snakeColor: this.getRandomColor(),\r\n      appleColor: this.getRandomColor(),\r\n      score: 0,\r\n      newHighScore: false,\r\n    });\r\n  }\r\n\r\n  getRandomColor() {\r\n    let hexa = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) color += hexa[Math.floor(Math.random() * 16)];\r\n    return color;\r\n  }\r\n\r\n  moveSnake() {\r\n    let snake = this.state.snake;\r\n    let previousPartX = this.state.snake[0].Xpos;\r\n    let previousPartY = this.state.snake[0].Ypos;\r\n    let tmpPartX = previousPartX;\r\n    let tmpPartY = previousPartY;\r\n    this.moveHead();\r\n    for (let i = 1; i < snake.length; i++) {\r\n      tmpPartX = snake[i].Xpos;\r\n      tmpPartY = snake[i].Ypos;\r\n      snake[i].Xpos = previousPartX;\r\n      snake[i].Ypos = previousPartY;\r\n      previousPartX = tmpPartX;\r\n      previousPartY = tmpPartY;\r\n    }\r\n    this.setState({ snake });\r\n  }\r\n\r\n  tryToEatApple() {\r\n    let snake = this.state.snake;\r\n    let apple = this.state.apple;\r\n\r\n    // if the snake's head is on an apple\r\n    if (snake[0].Xpos === apple.Xpos && snake[0].Ypos === apple.Ypos) {\r\n      let width = this.state.width;\r\n      let height = this.state.height;\r\n      let blockWidth = this.state.blockWidth;\r\n      let blockHeight = this.state.blockHeight;\r\n      let newTail = { Xpos: apple.Xpos, Ypos: apple.Ypos };\r\n      let highScore = this.state.highScore;\r\n      let newHighScore = this.state.newHighScore;\r\n      let gameLoopTimeout = this.state.gameLoopTimeout;\r\n\r\n      // increase snake size\r\n      snake.push(newTail);\r\n\r\n      // create another apple\r\n      apple.Xpos =\r\n        Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n        blockWidth;\r\n      apple.Ypos =\r\n        Math.floor(Math.random() * ((height - blockHeight) / blockHeight + 1)) *\r\n        blockHeight;\r\n      while (this.isAppleOnSnake(apple.Xpos, apple.Ypos)) {\r\n        apple.Xpos =\r\n          Math.floor(Math.random() * ((width - blockWidth) / blockWidth + 1)) *\r\n          blockWidth;\r\n        apple.Ypos =\r\n          Math.floor(\r\n            Math.random() * ((height - blockHeight) / blockHeight + 1)\r\n          ) * blockHeight;\r\n      }\r\n\r\n      // increment high score if needed\r\n      if (this.state.score === highScore) {\r\n        highScore++;\r\n        localStorage.setItem('snakeHighScore', highScore);\r\n        newHighScore = true;\r\n      }\r\n\r\n      // decrease the game loop timeout\r\n      if (gameLoopTimeout > 25) gameLoopTimeout -= 0.5;\r\n\r\n      this.setState({\r\n        snake,\r\n        apple,\r\n        score: this.state.score + 1,\r\n        highScore,\r\n        newHighScore,\r\n        gameLoopTimeout,\r\n      });\r\n    }\r\n  }\r\n\r\n  tryToEatSnake() {\r\n    let snake = this.state.snake;\r\n\r\n    for (let i = 1; i < snake.length; i++) {\r\n      if (snake[0].Xpos === snake[i].Xpos && snake[0].Ypos === snake[i].Ypos)\r\n        this.setState({ isGameOver: true });\r\n    }\r\n  }\r\n\r\n  isAppleOnSnake(appleXpos, appleYpos) {\r\n    let snake = this.state.snake;\r\n    for (let i = 0; i < snake.length; i++) {\r\n      if (appleXpos === snake[i].Xpos && appleYpos === snake[i].Ypos)\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  moveHead() {\r\n    switch (this.state.direction) {\r\n      case 'left':\r\n        this.moveHeadLeft();\r\n        break;\r\n      case 'up':\r\n        this.moveHeadUp();\r\n        break;\r\n      case 'right':\r\n        this.moveHeadRight();\r\n        break;\r\n      default:\r\n        this.moveHeadDown();\r\n    }\r\n  }\r\n\r\n  moveHeadLeft() {\r\n    let width = this.state.width;\r\n    let blockWidth = this.state.blockWidth;\r\n    let snake = this.state.snake;\r\n    snake[0].Xpos =\r\n      snake[0].Xpos <= 0 ? width - blockWidth : snake[0].Xpos - blockWidth;\r\n    this.setState({ snake });\r\n  }\r\n\r\n  moveHeadUp() {\r\n    let height = this.state.height;\r\n    let blockHeight = this.state.blockHeight;\r\n    let snake = this.state.snake;\r\n    snake[0].Ypos =\r\n      snake[0].Ypos <= 0 ? height - blockHeight : snake[0].Ypos - blockHeight;\r\n    this.setState({ snake });\r\n  }\r\n\r\n  moveHeadRight() {\r\n    let width = this.state.width;\r\n    let blockWidth = this.state.blockWidth;\r\n    let snake = this.state.snake;\r\n    snake[0].Xpos =\r\n      snake[0].Xpos >= width - blockWidth ? 0 : snake[0].Xpos + blockWidth;\r\n    this.setState({ snake });\r\n  }\r\n\r\n  moveHeadDown() {\r\n    let height = this.state.height;\r\n    let blockHeight = this.state.blockHeight;\r\n    let snake = this.state.snake;\r\n    snake[0].Ypos =\r\n      snake[0].Ypos >= height - blockHeight ? 0 : snake[0].Ypos + blockHeight;\r\n    this.setState({ snake });\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    // if spacebar is pressed to run a new game\r\n    if (this.state.isGameOver && event.keyCode === 32) {\r\n      this.resetGame();\r\n      return;\r\n    }\r\n\r\n    if (this.state.directionChanged) return;\r\n\r\n    switch (event.keyCode) {\r\n      case 37:\r\n      case 65:\r\n        this.goLeft();\r\n        break;\r\n      case 38:\r\n      case 87:\r\n        this.goUp();\r\n        break;\r\n      case 39:\r\n      case 68:\r\n        this.goRight();\r\n        break;\r\n      case 40:\r\n      case 83:\r\n        this.goDown();\r\n        break;\r\n      default:\r\n    }\r\n    this.setState({ directionChanged: true });\r\n  }\r\n\r\n  goLeft() {\r\n    let newDirection = this.state.direction === 'right' ? 'right' : 'left';\r\n    this.setState({ direction: newDirection });\r\n  }\r\n\r\n  goUp() {\r\n    let newDirection = this.state.direction === 'down' ? 'down' : 'up';\r\n    this.setState({ direction: newDirection });\r\n  }\r\n\r\n  goRight() {\r\n    let newDirection = this.state.direction === 'left' ? 'left' : 'right';\r\n    this.setState({ direction: newDirection });\r\n  }\r\n\r\n  goDown() {\r\n    let newDirection = this.state.direction === 'up' ? 'up' : 'down';\r\n    this.setState({ direction: newDirection });\r\n  }\r\n\r\n  render() {\r\n    // Game over\r\n    if (this.state.isGameOver) {\r\n      return (\r\n        <GameOver\r\n          width={this.state.width}\r\n          height={this.state.height}\r\n          highScore={this.state.highScore}\r\n          newHighScore={this.state.newHighScore}\r\n          score={this.state.score}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id='GameBoard'\r\n        style={{\r\n          width: this.state.width,\r\n          height: this.state.height,\r\n          borderWidth: this.state.width / 50,\r\n        }}\r\n      >\r\n        {this.state.snake.map((snakePart, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              className='Block'\r\n              style={{\r\n                width: this.state.blockWidth,\r\n                height: this.state.blockHeight,\r\n                left: snakePart.Xpos,\r\n                top: snakePart.Ypos,\r\n                background: this.state.snakeColor,\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        <div\r\n          className='Block'\r\n          style={{\r\n            width: this.state.blockWidth,\r\n            height: this.state.blockHeight,\r\n            left: this.state.apple.Xpos,\r\n            top: this.state.apple.Ypos,\r\n            background: this.state.appleColor,\r\n          }}\r\n        />\r\n        <div id='Score' style={{ fontSize: this.state.width / 20 }}>\r\n          HIGH-SCORE: {this.state.highScore}&ensp;&ensp;&ensp;&ensp;SCORE:{' '}\r\n          {this.state.score}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}